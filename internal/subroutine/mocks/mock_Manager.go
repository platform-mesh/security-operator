// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net/http"

	"github.com/go-logr/logr"
	mock "github.com/stretchr/testify/mock"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/cluster"
	"sigs.k8s.io/controller-runtime/pkg/config"
	"sigs.k8s.io/controller-runtime/pkg/healthz"
	manager0 "sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/multicluster-runtime/pkg/manager"
	"sigs.k8s.io/multicluster-runtime/pkg/multicluster"
)

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockManager
func (_mock *MockManager) Add(runnable manager.Runnable) error {
	ret := _mock.Called(runnable)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(manager.Runnable) error); ok {
		r0 = returnFunc(runnable)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockManager_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - runnable manager.Runnable
func (_e *MockManager_Expecter) Add(runnable interface{}) *MockManager_Add_Call {
	return &MockManager_Add_Call{Call: _e.mock.On("Add", runnable)}
}

func (_c *MockManager_Add_Call) Run(run func(runnable manager.Runnable)) *MockManager_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 manager.Runnable
		if args[0] != nil {
			arg0 = args[0].(manager.Runnable)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_Add_Call) Return(err error) *MockManager_Add_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_Add_Call) RunAndReturn(run func(runnable manager.Runnable) error) *MockManager_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddHealthzCheck provides a mock function for the type MockManager
func (_mock *MockManager) AddHealthzCheck(name string, check healthz.Checker) error {
	ret := _mock.Called(name, check)

	if len(ret) == 0 {
		panic("no return value specified for AddHealthzCheck")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, healthz.Checker) error); ok {
		r0 = returnFunc(name, check)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_AddHealthzCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddHealthzCheck'
type MockManager_AddHealthzCheck_Call struct {
	*mock.Call
}

// AddHealthzCheck is a helper method to define mock.On call
//   - name string
//   - check healthz.Checker
func (_e *MockManager_Expecter) AddHealthzCheck(name interface{}, check interface{}) *MockManager_AddHealthzCheck_Call {
	return &MockManager_AddHealthzCheck_Call{Call: _e.mock.On("AddHealthzCheck", name, check)}
}

func (_c *MockManager_AddHealthzCheck_Call) Run(run func(name string, check healthz.Checker)) *MockManager_AddHealthzCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 healthz.Checker
		if args[1] != nil {
			arg1 = args[1].(healthz.Checker)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_AddHealthzCheck_Call) Return(err error) *MockManager_AddHealthzCheck_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_AddHealthzCheck_Call) RunAndReturn(run func(name string, check healthz.Checker) error) *MockManager_AddHealthzCheck_Call {
	_c.Call.Return(run)
	return _c
}

// AddMetricsServerExtraHandler provides a mock function for the type MockManager
func (_mock *MockManager) AddMetricsServerExtraHandler(path string, handler http.Handler) error {
	ret := _mock.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for AddMetricsServerExtraHandler")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, http.Handler) error); ok {
		r0 = returnFunc(path, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_AddMetricsServerExtraHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMetricsServerExtraHandler'
type MockManager_AddMetricsServerExtraHandler_Call struct {
	*mock.Call
}

// AddMetricsServerExtraHandler is a helper method to define mock.On call
//   - path string
//   - handler http.Handler
func (_e *MockManager_Expecter) AddMetricsServerExtraHandler(path interface{}, handler interface{}) *MockManager_AddMetricsServerExtraHandler_Call {
	return &MockManager_AddMetricsServerExtraHandler_Call{Call: _e.mock.On("AddMetricsServerExtraHandler", path, handler)}
}

func (_c *MockManager_AddMetricsServerExtraHandler_Call) Run(run func(path string, handler http.Handler)) *MockManager_AddMetricsServerExtraHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 http.Handler
		if args[1] != nil {
			arg1 = args[1].(http.Handler)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_AddMetricsServerExtraHandler_Call) Return(err error) *MockManager_AddMetricsServerExtraHandler_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_AddMetricsServerExtraHandler_Call) RunAndReturn(run func(path string, handler http.Handler) error) *MockManager_AddMetricsServerExtraHandler_Call {
	_c.Call.Return(run)
	return _c
}

// AddReadyzCheck provides a mock function for the type MockManager
func (_mock *MockManager) AddReadyzCheck(name string, check healthz.Checker) error {
	ret := _mock.Called(name, check)

	if len(ret) == 0 {
		panic("no return value specified for AddReadyzCheck")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, healthz.Checker) error); ok {
		r0 = returnFunc(name, check)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_AddReadyzCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReadyzCheck'
type MockManager_AddReadyzCheck_Call struct {
	*mock.Call
}

// AddReadyzCheck is a helper method to define mock.On call
//   - name string
//   - check healthz.Checker
func (_e *MockManager_Expecter) AddReadyzCheck(name interface{}, check interface{}) *MockManager_AddReadyzCheck_Call {
	return &MockManager_AddReadyzCheck_Call{Call: _e.mock.On("AddReadyzCheck", name, check)}
}

func (_c *MockManager_AddReadyzCheck_Call) Run(run func(name string, check healthz.Checker)) *MockManager_AddReadyzCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 healthz.Checker
		if args[1] != nil {
			arg1 = args[1].(healthz.Checker)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_AddReadyzCheck_Call) Return(err error) *MockManager_AddReadyzCheck_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_AddReadyzCheck_Call) RunAndReturn(run func(name string, check healthz.Checker) error) *MockManager_AddReadyzCheck_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterFromContext provides a mock function for the type MockManager
func (_mock *MockManager) ClusterFromContext(ctx context.Context) (cluster.Cluster, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterFromContext")
	}

	var r0 cluster.Cluster
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (cluster.Cluster, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) cluster.Cluster); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.Cluster)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManager_ClusterFromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterFromContext'
type MockManager_ClusterFromContext_Call struct {
	*mock.Call
}

// ClusterFromContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) ClusterFromContext(ctx interface{}) *MockManager_ClusterFromContext_Call {
	return &MockManager_ClusterFromContext_Call{Call: _e.mock.On("ClusterFromContext", ctx)}
}

func (_c *MockManager_ClusterFromContext_Call) Run(run func(ctx context.Context)) *MockManager_ClusterFromContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_ClusterFromContext_Call) Return(cluster1 cluster.Cluster, err error) *MockManager_ClusterFromContext_Call {
	_c.Call.Return(cluster1, err)
	return _c
}

func (_c *MockManager_ClusterFromContext_Call) RunAndReturn(run func(ctx context.Context) (cluster.Cluster, error)) *MockManager_ClusterFromContext_Call {
	_c.Call.Return(run)
	return _c
}

// Elected provides a mock function for the type MockManager
func (_mock *MockManager) Elected() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Elected")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockManager_Elected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Elected'
type MockManager_Elected_Call struct {
	*mock.Call
}

// Elected is a helper method to define mock.On call
func (_e *MockManager_Expecter) Elected() *MockManager_Elected_Call {
	return &MockManager_Elected_Call{Call: _e.mock.On("Elected")}
}

func (_c *MockManager_Elected_Call) Run(run func()) *MockManager_Elected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Elected_Call) Return(valCh <-chan struct{}) *MockManager_Elected_Call {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockManager_Elected_Call) RunAndReturn(run func() <-chan struct{}) *MockManager_Elected_Call {
	_c.Call.Return(run)
	return _c
}

// Engage provides a mock function for the type MockManager
func (_mock *MockManager) Engage(context1 context.Context, s string, cluster1 cluster.Cluster) error {
	ret := _mock.Called(context1, s, cluster1)

	if len(ret) == 0 {
		panic("no return value specified for Engage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, cluster.Cluster) error); ok {
		r0 = returnFunc(context1, s, cluster1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_Engage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Engage'
type MockManager_Engage_Call struct {
	*mock.Call
}

// Engage is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - cluster1 cluster.Cluster
func (_e *MockManager_Expecter) Engage(context1 interface{}, s interface{}, cluster1 interface{}) *MockManager_Engage_Call {
	return &MockManager_Engage_Call{Call: _e.mock.On("Engage", context1, s, cluster1)}
}

func (_c *MockManager_Engage_Call) Run(run func(context1 context.Context, s string, cluster1 cluster.Cluster)) *MockManager_Engage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 cluster.Cluster
		if args[2] != nil {
			arg2 = args[2].(cluster.Cluster)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockManager_Engage_Call) Return(err error) *MockManager_Engage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_Engage_Call) RunAndReturn(run func(context1 context.Context, s string, cluster1 cluster.Cluster) error) *MockManager_Engage_Call {
	_c.Call.Return(run)
	return _c
}

// GetCluster provides a mock function for the type MockManager
func (_mock *MockManager) GetCluster(ctx context.Context, clusterName string) (cluster.Cluster, error) {
	ret := _mock.Called(ctx, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 cluster.Cluster
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (cluster.Cluster, error)); ok {
		return returnFunc(ctx, clusterName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) cluster.Cluster); ok {
		r0 = returnFunc(ctx, clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.Cluster)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, clusterName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManager_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type MockManager_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
func (_e *MockManager_Expecter) GetCluster(ctx interface{}, clusterName interface{}) *MockManager_GetCluster_Call {
	return &MockManager_GetCluster_Call{Call: _e.mock.On("GetCluster", ctx, clusterName)}
}

func (_c *MockManager_GetCluster_Call) Run(run func(ctx context.Context, clusterName string)) *MockManager_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_GetCluster_Call) Return(cluster1 cluster.Cluster, err error) *MockManager_GetCluster_Call {
	_c.Call.Return(cluster1, err)
	return _c
}

func (_c *MockManager_GetCluster_Call) RunAndReturn(run func(ctx context.Context, clusterName string) (cluster.Cluster, error)) *MockManager_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetControllerOptions provides a mock function for the type MockManager
func (_mock *MockManager) GetControllerOptions() config.Controller {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetControllerOptions")
	}

	var r0 config.Controller
	if returnFunc, ok := ret.Get(0).(func() config.Controller); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(config.Controller)
	}
	return r0
}

// MockManager_GetControllerOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControllerOptions'
type MockManager_GetControllerOptions_Call struct {
	*mock.Call
}

// GetControllerOptions is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetControllerOptions() *MockManager_GetControllerOptions_Call {
	return &MockManager_GetControllerOptions_Call{Call: _e.mock.On("GetControllerOptions")}
}

func (_c *MockManager_GetControllerOptions_Call) Run(run func()) *MockManager_GetControllerOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetControllerOptions_Call) Return(controller config.Controller) *MockManager_GetControllerOptions_Call {
	_c.Call.Return(controller)
	return _c
}

func (_c *MockManager_GetControllerOptions_Call) RunAndReturn(run func() config.Controller) *MockManager_GetControllerOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetFieldIndexer provides a mock function for the type MockManager
func (_mock *MockManager) GetFieldIndexer() client.FieldIndexer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFieldIndexer")
	}

	var r0 client.FieldIndexer
	if returnFunc, ok := ret.Get(0).(func() client.FieldIndexer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.FieldIndexer)
		}
	}
	return r0
}

// MockManager_GetFieldIndexer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFieldIndexer'
type MockManager_GetFieldIndexer_Call struct {
	*mock.Call
}

// GetFieldIndexer is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetFieldIndexer() *MockManager_GetFieldIndexer_Call {
	return &MockManager_GetFieldIndexer_Call{Call: _e.mock.On("GetFieldIndexer")}
}

func (_c *MockManager_GetFieldIndexer_Call) Run(run func()) *MockManager_GetFieldIndexer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetFieldIndexer_Call) Return(fieldIndexer client.FieldIndexer) *MockManager_GetFieldIndexer_Call {
	_c.Call.Return(fieldIndexer)
	return _c
}

func (_c *MockManager_GetFieldIndexer_Call) RunAndReturn(run func() client.FieldIndexer) *MockManager_GetFieldIndexer_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalManager provides a mock function for the type MockManager
func (_mock *MockManager) GetLocalManager() manager0.Manager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLocalManager")
	}

	var r0 manager0.Manager
	if returnFunc, ok := ret.Get(0).(func() manager0.Manager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(manager0.Manager)
		}
	}
	return r0
}

// MockManager_GetLocalManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalManager'
type MockManager_GetLocalManager_Call struct {
	*mock.Call
}

// GetLocalManager is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetLocalManager() *MockManager_GetLocalManager_Call {
	return &MockManager_GetLocalManager_Call{Call: _e.mock.On("GetLocalManager")}
}

func (_c *MockManager_GetLocalManager_Call) Run(run func()) *MockManager_GetLocalManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetLocalManager_Call) Return(manager1 manager0.Manager) *MockManager_GetLocalManager_Call {
	_c.Call.Return(manager1)
	return _c
}

func (_c *MockManager_GetLocalManager_Call) RunAndReturn(run func() manager0.Manager) *MockManager_GetLocalManager_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogger provides a mock function for the type MockManager
func (_mock *MockManager) GetLogger() logr.Logger {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogger")
	}

	var r0 logr.Logger
	if returnFunc, ok := ret.Get(0).(func() logr.Logger); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(logr.Logger)
	}
	return r0
}

// MockManager_GetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogger'
type MockManager_GetLogger_Call struct {
	*mock.Call
}

// GetLogger is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetLogger() *MockManager_GetLogger_Call {
	return &MockManager_GetLogger_Call{Call: _e.mock.On("GetLogger")}
}

func (_c *MockManager_GetLogger_Call) Run(run func()) *MockManager_GetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetLogger_Call) Return(logger logr.Logger) *MockManager_GetLogger_Call {
	_c.Call.Return(logger)
	return _c
}

func (_c *MockManager_GetLogger_Call) RunAndReturn(run func() logr.Logger) *MockManager_GetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// GetManager provides a mock function for the type MockManager
func (_mock *MockManager) GetManager(ctx context.Context, clusterName string) (manager0.Manager, error) {
	ret := _mock.Called(ctx, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetManager")
	}

	var r0 manager0.Manager
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (manager0.Manager, error)); ok {
		return returnFunc(ctx, clusterName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) manager0.Manager); ok {
		r0 = returnFunc(ctx, clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(manager0.Manager)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, clusterName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManager_GetManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManager'
type MockManager_GetManager_Call struct {
	*mock.Call
}

// GetManager is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
func (_e *MockManager_Expecter) GetManager(ctx interface{}, clusterName interface{}) *MockManager_GetManager_Call {
	return &MockManager_GetManager_Call{Call: _e.mock.On("GetManager", ctx, clusterName)}
}

func (_c *MockManager_GetManager_Call) Run(run func(ctx context.Context, clusterName string)) *MockManager_GetManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_GetManager_Call) Return(manager1 manager0.Manager, err error) *MockManager_GetManager_Call {
	_c.Call.Return(manager1, err)
	return _c
}

func (_c *MockManager_GetManager_Call) RunAndReturn(run func(ctx context.Context, clusterName string) (manager0.Manager, error)) *MockManager_GetManager_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvider provides a mock function for the type MockManager
func (_mock *MockManager) GetProvider() multicluster.Provider {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 multicluster.Provider
	if returnFunc, ok := ret.Get(0).(func() multicluster.Provider); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(multicluster.Provider)
		}
	}
	return r0
}

// MockManager_GetProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvider'
type MockManager_GetProvider_Call struct {
	*mock.Call
}

// GetProvider is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetProvider() *MockManager_GetProvider_Call {
	return &MockManager_GetProvider_Call{Call: _e.mock.On("GetProvider")}
}

func (_c *MockManager_GetProvider_Call) Run(run func()) *MockManager_GetProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetProvider_Call) Return(provider multicluster.Provider) *MockManager_GetProvider_Call {
	_c.Call.Return(provider)
	return _c
}

func (_c *MockManager_GetProvider_Call) RunAndReturn(run func() multicluster.Provider) *MockManager_GetProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetWebhookServer provides a mock function for the type MockManager
func (_mock *MockManager) GetWebhookServer() webhook.Server {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWebhookServer")
	}

	var r0 webhook.Server
	if returnFunc, ok := ret.Get(0).(func() webhook.Server); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(webhook.Server)
		}
	}
	return r0
}

// MockManager_GetWebhookServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWebhookServer'
type MockManager_GetWebhookServer_Call struct {
	*mock.Call
}

// GetWebhookServer is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetWebhookServer() *MockManager_GetWebhookServer_Call {
	return &MockManager_GetWebhookServer_Call{Call: _e.mock.On("GetWebhookServer")}
}

func (_c *MockManager_GetWebhookServer_Call) Run(run func()) *MockManager_GetWebhookServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetWebhookServer_Call) Return(server webhook.Server) *MockManager_GetWebhookServer_Call {
	_c.Call.Return(server)
	return _c
}

func (_c *MockManager_GetWebhookServer_Call) RunAndReturn(run func() webhook.Server) *MockManager_GetWebhookServer_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockManager
func (_mock *MockManager) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) Start(ctx interface{}) *MockManager_Start_Call {
	return &MockManager_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockManager_Start_Call) Run(run func(ctx context.Context)) *MockManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_Start_Call) Return(err error) *MockManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockManager_Start_Call {
	_c.Call.Return(run)
	return _c
}
