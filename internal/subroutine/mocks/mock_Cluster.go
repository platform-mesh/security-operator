// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net/http"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/api/meta"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/record"
	"sigs.k8s.io/controller-runtime/pkg/cache"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// NewMockCluster creates a new instance of MockCluster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCluster(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCluster {
	mock := &MockCluster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCluster is an autogenerated mock type for the Cluster type
type MockCluster struct {
	mock.Mock
}

type MockCluster_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCluster) EXPECT() *MockCluster_Expecter {
	return &MockCluster_Expecter{mock: &_m.Mock}
}

// GetAPIReader provides a mock function for the type MockCluster
func (_mock *MockCluster) GetAPIReader() client.Reader {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAPIReader")
	}

	var r0 client.Reader
	if returnFunc, ok := ret.Get(0).(func() client.Reader); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Reader)
		}
	}
	return r0
}

// MockCluster_GetAPIReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAPIReader'
type MockCluster_GetAPIReader_Call struct {
	*mock.Call
}

// GetAPIReader is a helper method to define mock.On call
func (_e *MockCluster_Expecter) GetAPIReader() *MockCluster_GetAPIReader_Call {
	return &MockCluster_GetAPIReader_Call{Call: _e.mock.On("GetAPIReader")}
}

func (_c *MockCluster_GetAPIReader_Call) Run(run func()) *MockCluster_GetAPIReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_GetAPIReader_Call) Return(reader client.Reader) *MockCluster_GetAPIReader_Call {
	_c.Call.Return(reader)
	return _c
}

func (_c *MockCluster_GetAPIReader_Call) RunAndReturn(run func() client.Reader) *MockCluster_GetAPIReader_Call {
	_c.Call.Return(run)
	return _c
}

// GetCache provides a mock function for the type MockCluster
func (_mock *MockCluster) GetCache() cache.Cache {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCache")
	}

	var r0 cache.Cache
	if returnFunc, ok := ret.Get(0).(func() cache.Cache); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Cache)
		}
	}
	return r0
}

// MockCluster_GetCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCache'
type MockCluster_GetCache_Call struct {
	*mock.Call
}

// GetCache is a helper method to define mock.On call
func (_e *MockCluster_Expecter) GetCache() *MockCluster_GetCache_Call {
	return &MockCluster_GetCache_Call{Call: _e.mock.On("GetCache")}
}

func (_c *MockCluster_GetCache_Call) Run(run func()) *MockCluster_GetCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_GetCache_Call) Return(cache1 cache.Cache) *MockCluster_GetCache_Call {
	_c.Call.Return(cache1)
	return _c
}

func (_c *MockCluster_GetCache_Call) RunAndReturn(run func() cache.Cache) *MockCluster_GetCache_Call {
	_c.Call.Return(run)
	return _c
}

// GetClient provides a mock function for the type MockCluster
func (_mock *MockCluster) GetClient() client.Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 client.Client
	if returnFunc, ok := ret.Get(0).(func() client.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}
	return r0
}

// MockCluster_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockCluster_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
func (_e *MockCluster_Expecter) GetClient() *MockCluster_GetClient_Call {
	return &MockCluster_GetClient_Call{Call: _e.mock.On("GetClient")}
}

func (_c *MockCluster_GetClient_Call) Run(run func()) *MockCluster_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_GetClient_Call) Return(client1 client.Client) *MockCluster_GetClient_Call {
	_c.Call.Return(client1)
	return _c
}

func (_c *MockCluster_GetClient_Call) RunAndReturn(run func() client.Client) *MockCluster_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function for the type MockCluster
func (_mock *MockCluster) GetConfig() *rest.Config {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *rest.Config
	if returnFunc, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}
	return r0
}

// MockCluster_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockCluster_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockCluster_Expecter) GetConfig() *MockCluster_GetConfig_Call {
	return &MockCluster_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockCluster_GetConfig_Call) Run(run func()) *MockCluster_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_GetConfig_Call) Return(config *rest.Config) *MockCluster_GetConfig_Call {
	_c.Call.Return(config)
	return _c
}

func (_c *MockCluster_GetConfig_Call) RunAndReturn(run func() *rest.Config) *MockCluster_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventRecorderFor provides a mock function for the type MockCluster
func (_mock *MockCluster) GetEventRecorderFor(name string) record.EventRecorder {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetEventRecorderFor")
	}

	var r0 record.EventRecorder
	if returnFunc, ok := ret.Get(0).(func(string) record.EventRecorder); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(record.EventRecorder)
		}
	}
	return r0
}

// MockCluster_GetEventRecorderFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventRecorderFor'
type MockCluster_GetEventRecorderFor_Call struct {
	*mock.Call
}

// GetEventRecorderFor is a helper method to define mock.On call
//   - name string
func (_e *MockCluster_Expecter) GetEventRecorderFor(name interface{}) *MockCluster_GetEventRecorderFor_Call {
	return &MockCluster_GetEventRecorderFor_Call{Call: _e.mock.On("GetEventRecorderFor", name)}
}

func (_c *MockCluster_GetEventRecorderFor_Call) Run(run func(name string)) *MockCluster_GetEventRecorderFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCluster_GetEventRecorderFor_Call) Return(eventRecorder record.EventRecorder) *MockCluster_GetEventRecorderFor_Call {
	_c.Call.Return(eventRecorder)
	return _c
}

func (_c *MockCluster_GetEventRecorderFor_Call) RunAndReturn(run func(name string) record.EventRecorder) *MockCluster_GetEventRecorderFor_Call {
	_c.Call.Return(run)
	return _c
}

// GetFieldIndexer provides a mock function for the type MockCluster
func (_mock *MockCluster) GetFieldIndexer() client.FieldIndexer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFieldIndexer")
	}

	var r0 client.FieldIndexer
	if returnFunc, ok := ret.Get(0).(func() client.FieldIndexer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.FieldIndexer)
		}
	}
	return r0
}

// MockCluster_GetFieldIndexer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFieldIndexer'
type MockCluster_GetFieldIndexer_Call struct {
	*mock.Call
}

// GetFieldIndexer is a helper method to define mock.On call
func (_e *MockCluster_Expecter) GetFieldIndexer() *MockCluster_GetFieldIndexer_Call {
	return &MockCluster_GetFieldIndexer_Call{Call: _e.mock.On("GetFieldIndexer")}
}

func (_c *MockCluster_GetFieldIndexer_Call) Run(run func()) *MockCluster_GetFieldIndexer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_GetFieldIndexer_Call) Return(fieldIndexer client.FieldIndexer) *MockCluster_GetFieldIndexer_Call {
	_c.Call.Return(fieldIndexer)
	return _c
}

func (_c *MockCluster_GetFieldIndexer_Call) RunAndReturn(run func() client.FieldIndexer) *MockCluster_GetFieldIndexer_Call {
	_c.Call.Return(run)
	return _c
}

// GetHTTPClient provides a mock function for the type MockCluster
func (_mock *MockCluster) GetHTTPClient() *http.Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHTTPClient")
	}

	var r0 *http.Client
	if returnFunc, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}
	return r0
}

// MockCluster_GetHTTPClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHTTPClient'
type MockCluster_GetHTTPClient_Call struct {
	*mock.Call
}

// GetHTTPClient is a helper method to define mock.On call
func (_e *MockCluster_Expecter) GetHTTPClient() *MockCluster_GetHTTPClient_Call {
	return &MockCluster_GetHTTPClient_Call{Call: _e.mock.On("GetHTTPClient")}
}

func (_c *MockCluster_GetHTTPClient_Call) Run(run func()) *MockCluster_GetHTTPClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_GetHTTPClient_Call) Return(client1 *http.Client) *MockCluster_GetHTTPClient_Call {
	_c.Call.Return(client1)
	return _c
}

func (_c *MockCluster_GetHTTPClient_Call) RunAndReturn(run func() *http.Client) *MockCluster_GetHTTPClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetRESTMapper provides a mock function for the type MockCluster
func (_mock *MockCluster) GetRESTMapper() meta.RESTMapper {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRESTMapper")
	}

	var r0 meta.RESTMapper
	if returnFunc, ok := ret.Get(0).(func() meta.RESTMapper); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meta.RESTMapper)
		}
	}
	return r0
}

// MockCluster_GetRESTMapper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRESTMapper'
type MockCluster_GetRESTMapper_Call struct {
	*mock.Call
}

// GetRESTMapper is a helper method to define mock.On call
func (_e *MockCluster_Expecter) GetRESTMapper() *MockCluster_GetRESTMapper_Call {
	return &MockCluster_GetRESTMapper_Call{Call: _e.mock.On("GetRESTMapper")}
}

func (_c *MockCluster_GetRESTMapper_Call) Run(run func()) *MockCluster_GetRESTMapper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_GetRESTMapper_Call) Return(rESTMapper meta.RESTMapper) *MockCluster_GetRESTMapper_Call {
	_c.Call.Return(rESTMapper)
	return _c
}

func (_c *MockCluster_GetRESTMapper_Call) RunAndReturn(run func() meta.RESTMapper) *MockCluster_GetRESTMapper_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheme provides a mock function for the type MockCluster
func (_mock *MockCluster) GetScheme() *runtime.Scheme {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScheme")
	}

	var r0 *runtime.Scheme
	if returnFunc, ok := ret.Get(0).(func() *runtime.Scheme); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.Scheme)
		}
	}
	return r0
}

// MockCluster_GetScheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheme'
type MockCluster_GetScheme_Call struct {
	*mock.Call
}

// GetScheme is a helper method to define mock.On call
func (_e *MockCluster_Expecter) GetScheme() *MockCluster_GetScheme_Call {
	return &MockCluster_GetScheme_Call{Call: _e.mock.On("GetScheme")}
}

func (_c *MockCluster_GetScheme_Call) Run(run func()) *MockCluster_GetScheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_GetScheme_Call) Return(scheme *runtime.Scheme) *MockCluster_GetScheme_Call {
	_c.Call.Return(scheme)
	return _c
}

func (_c *MockCluster_GetScheme_Call) RunAndReturn(run func() *runtime.Scheme) *MockCluster_GetScheme_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockCluster
func (_mock *MockCluster) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCluster_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCluster_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCluster_Expecter) Start(ctx interface{}) *MockCluster_Start_Call {
	return &MockCluster_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockCluster_Start_Call) Run(run func(ctx context.Context)) *MockCluster_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCluster_Start_Call) Return(err error) *MockCluster_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCluster_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockCluster_Start_Call {
	_c.Call.Return(run)
	return _c
}
